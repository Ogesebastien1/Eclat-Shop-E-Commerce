version: "3"
services:
  # Database service
  database:
    image: postgres:latest # Use the PostgreSQL image
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB} # Set the database name
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} # Set the password
      POSTGRES_USER: ${POSTGRES_USER} # Set the user
    healthcheck: # Check if the database is ready
      test: ["CMD", "pg_isready"] # Use the pg_isready command
      timeout: 5s # Set the timeout to 5 seconds
      retries: 5 # Retry 5 times
      start_period: 60s # Start the health check after 60 seconds
    volumes: # Mount the database_data volume to the container
      - database_data:/var/lib/postgresql/data

  # Symfony service
  symfony:
    build: .
    image: php-fpm:latest
    restart: always
    volumes: # Mount the app directory to the container
      - ./app:/var/www/my_project
    depends_on: # Depend on the database service
      - database
    environment: # Set the environment variables
      CORS_ALLOW_ORIGIN: "*"
      DATABASE_URL: ${DATABASE_URL} # Use the DATABASE_URL environment variable
      SYMFONY_DATABASE_PORT_NUMBER: "5432" # Use the default PostgreSQL port
      SYMFONY_DATABASE_NAME: ${POSTGRES_DB} # Use the POSTGRES_DB environment variable
      SYMFONY_DATABASE_USER: ${POSTGRES_USER} # Use the POSTGRES_USER environment variable
      APP_ENV: ${APP_ENV} # Use the APP_ENV environment variable
      APP_SECRET: ${APP_SECRET} # Use the APP_SECRET environment variable
      SYMFONY_DATABASE_PASSWORD: ${SYMFONY_DATABASE_PASSWORD} # Use the SYMFONY_DATABASE_PASSWORD environment variable
      SYMFONY_PROJECT_SKELETON: ${SYMFONY_BASE_DIR}/skelet # Use the SYMFONY_PROJECT_SKELETON environment variable
      JWT_SECRET_KEY: ${JWT_SECRET_KEY} # Use the JWT_SECRET_KEY environment variable
      JWT_PUBLIC_KEY: ${JWT_PUBLIC_KEY} # Use the JWT_PUBLIC_KEY environment variable
      JWT_PASSPHRASE: ${JWT_PASSPHRASE} # Use the JWT_PASSPHRASE environment variable
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY} # Use the CLIENT_SECRET environment variable
      STRIPE_PUBLISHABLE_KEY: ${REACT_APP_STRIPE_PUBLISHABLE_KEY} # Use the STRIPE_PUBLISHABLE_KEY environment variable
      STRIPE_WEBHOOK_SIGNATURE_KEY: ${STRIPE_WEBHOOK_SIGNATURE_KEY} # Use the STRIPE_WEBHOOK_SIGNATURE_KEY environment variable
      ACCESS_KEY_ID: ${ACCESS_KEY_ID}
      SECRET_ACCESS_KEY: ${SECRET_ACCESS_KEY}
      BUCKET_NAME: ${BUCKET_NAME}
      REGION: ${REGION}

  nginx:
    image: nginx:latest
    ports:
      - "8000:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./app:/var/www/my_project
    command: /bin/sh -c "chmod 666 /etc/nginx/nginx.conf && nginx -g 'daemon off;'"
    depends_on:
      - symfony

  # Frontend service
  frontend:
    image: node:latest # Use the latest Node.js image to run react project
    restart: always
    environment:
      CHOKIDAR_USEPOLLING: true
      WATCHPACK_POLLING: true # Use polling for file watching
      REACT_APP_STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY} # Set the STRIPE_PUBLISHABLE_KEY environment variable
      WDS_SOCKET_PORT: 3010 # Set the Webpack Dev Server socket port
    ports: # Map the port 3010 of the container to the port 3000 of the host
      - "3010:3000"
    volumes: # Mount the frontend directory to the container
      - ./frontend:/frontend
    command: /bin/sh -c "cd /frontend && npm install && npm run start" # Run the npm install and npm run start commands
    depends_on: # Depend on the symfony service
      - symfony

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      - database

volumes:
  # Database volume
  database_data:
